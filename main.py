import asyncio
from datetime import datetime
import pytz
from telethon import TelegramClient, events

# üîê –î–∞–Ω–Ω—ã–µ
API_ID = 21018756
API_HASH = '5fce0349ea49d2c1717d197f8536d1b5'
SESSION_NAME = 'countdown_session'
PHONE_NUMBER = '+88805727142'

# üéØ –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è
TARGET_TIME = datetime(2025, 6, 10, 9, 0, 0, tzinfo=pytz.timezone('Europe/Moscow'))

client = TelegramClient(SESSION_NAME, API_ID, API_HASH)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç—Å—á—ë—Ç–∞
def get_time_remaining():
    now = datetime.now(pytz.timezone('Europe/Moscow'))
    diff = TARGET_TIME - now
    if diff.total_seconds() <= 0:
        return None
    total_seconds = int(diff.total_seconds())
    hours, remainder = divmod(total_seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    return f"–î–æ 10 –∏—é–Ω—è 09:00 (–ú–°–ö) –æ—Å—Ç–∞–ª–æ—Å—å:\n" \
           f"‚è≥ {hours:02}:{minutes:02}:{seconds:02}"

# –ö–æ–º–∞–Ω–¥–∞ /–æ—Ç—Å—á–µ—Ç
@client.on(events.NewMessage(pattern='/–æ—Ç—Å—á–µ—Ç'))
async def handler(event):
    msg_text = get_time_remaining()
    if not msg_text:
        await event.reply("‚è∞ –í—Ä–µ–º—è —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ!")
        return
    message = await event.respond(msg_text)
    while True:
        await asyncio.sleep(60)
        msg_text = get_time_remaining()
        if not msg_text:
            await message.edit("‚è∞ –í—Ä–µ–º—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ!")
            break
        try:
            await message.edit(msg_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            break

# –ö–æ–º–∞–Ω–¥–∞ /–ª—é–±–ª—é—Å–æ–Ω—é
@client.on(events.NewMessage(pattern='/–ª—é–±–ª—é—Å–æ–Ω—é'))
async def love_sonya(event):
    await event.reply("–º—è–£ –ú–Ø–£ (meow gav gav )")

# –ó–∞–ø—É—Å–∫
async def main():
    print("üîë –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
    await client.start(PHONE_NUMBER)
    print("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ñ–¥—ë—Ç –∫–æ–º–∞–Ω–¥—ã /–æ—Ç—Å—á–µ—Ç –∏–ª–∏ /–ª—é–±–ª—é—Å–æ–Ω—é")
    await client.run_until_disconnected()

if __name__ == '__main__':
    with client:
        client.loop.run_until_complete(main())
